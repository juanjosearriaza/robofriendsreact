{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/Counter.js","components/Header.js","constants.js","containers/App.js","actions.js","reducers.js","serviceWorkerRegistration.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","id","name","email","className","src","alt","CardList","robots","map","robot","i","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","Counter","updateCount","setState","state","count","color","this","onClick","React","Component","Header","nextProps","nextState","console","log","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","error","dispatch","event","text","target","value","payload","fetch","response","json","data","catch","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","rootReducer","combineReducers","action","logger","createLogger","store","createStore","applyMiddleware","ThunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.067a8f9f.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\n\r\nconst Card = ({ id, name, email }) => {\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 bw2 shadow-5 grow\">\r\n      <img\r\n        src={`https://robohash.org\r\n/${id}?size=300x300`}\r\n        alt=\"robot\"\r\n      ></img>\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {robots.map((robot, i) => {\r\n        return (\r\n          <Card\r\n            key={robots[i].id}\r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            email={robots[i].email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchField, searchChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        className=\"pa3 ba bg-lightest-blue b--green\"\r\n        type=\"search\"\r\n        placeholder=\"search robots\"\r\n        onChange={searchChange}\r\n      ></input>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\nreturn (\r\n    <div style={{overflowY: \"scroll\", border: \"1px black solid\", height: \"500px\"}}>\r\n        {props.children}\r\n    </div>\r\n)\r\n}\r\n\r\nexport default Scroll;","import React from \"react\";\r\n\r\nclass Counter extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    updateCount = () => {\r\n        this.setState(state => ({count: state.count + 1}))\r\n    }\r\n    render() {\r\n        return (\r\n            <button color={this.props.color} onClick={this.updateCount}>\r\n                Count: {this.state.count}\r\n            </button>\r\n        )\r\n            \r\n        \r\n    }\r\n}\r\n\r\nexport default Counter;\r\n","import React from \"react\";\r\nimport Counter from \"./Counter\";\r\n\r\nclass Header extends React.Component {\r\n\r\nshouldComponentUpdate(nextProps, nextState) {\r\nreturn false;\r\n}\r\n\r\n    \r\nrender(){\r\n    console.log(\"Header\");\r\n  return (\r\n    <div>\r\n    <h1>Robofriends</h1>\r\n    <Counter color={\"red\"}/>\r\n    </div>\r\n\r\n  );\r\n}};\r\n\r\nexport default Header;\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";","import React from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./App.css\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport Header from \"../components/Header\";\r\n\r\n\r\nimport { requestRobots, setSearchField } from \"../actions\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => requestRobots(dispatch),\r\n  };\r\n};\r\n\r\nclass App extends React.Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { searchField, onSearchChange, robots, isPending } = this.props;\r\n\r\n    const filteredRobots = robots.filter((robot) =>\r\n      robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n    );\r\n\r\n    return isPending ? (\r\n      <h1 className=\"tc\">Loading Robots</h1>\r\n    ) : (\r\n      <div className=\"tc\">\r\n        <Header/>\r\n        <SearchBox searchChange={onSearchChange} />\r\n        <Scroll>\r\n          <CardList robots={filteredRobots} />\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from \"./constants\";\r\n\r\nexport const setSearchField = (text) => ({\r\ntype: CHANGE_SEARCH_FIELD,\r\npayload: text\r\n});\r\n\r\nexport const requestRobots = (dispatch) => {\r\ndispatch({type: REQUEST_ROBOTS_PENDING})\r\nfetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((response) => response.json())\r\n      .then((data) => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n      .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n  searchField: \"\",\r\n};\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: \"\",\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return { ...state, searchField: action.payload };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return { ...state, isPending: true };\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return { ...state, robots: action.payload, isPending: false };\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return { ...state, error: action.payload, isPending: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://cra.link/PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then((registration) => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://cra.link/PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then((response) => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then((registration) => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log('No internet connection found. App is running in offline mode.');\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then((registration) => {\r\n          registration.unregister();\r\n        })\r\n        .catch((error) => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }\r\n  ","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport \"tachyons\";\r\nimport App from \"./containers/App\";\r\nimport { searchRobots, requestRobots } from \"./reducers\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport  ThunkMiddleware  from \"redux-thunk\";\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\n\r\n\r\nconst rootReducer = combineReducers({searchRobots, requestRobots})\r\nconst logger = createLogger();\r\nconst store = createStore(rootReducer, applyMiddleware(ThunkMiddleware, logger));\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n    <App />\r\n    </Provider>,\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\nserviceWorkerRegistration.register();\r\n\r\n"],"sourceRoot":""}