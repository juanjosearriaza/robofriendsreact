{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/Counter.js","components/Header.js","constants.js","containers/App.js","actions.js","reducers.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","id","name","email","className","src","alt","CardList","robots","map","robot","i","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","Counter","updateCount","setState","state","count","color","this","onClick","React","Component","Header","nextProps","nextState","console","log","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","error","dispatch","event","text","target","value","payload","fetch","response","json","data","catch","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","logger","createLogger","store","createStore","applyMiddleware","ThunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f98e4be.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\n\r\nconst Card = ({ id, name, email }) => {\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 bw2 shadow-5 grow\">\r\n      <img\r\n        src={`https://robohash.org\r\n/${id}?200x200`}\r\n        alt=\"robot\"\r\n      ></img>\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {robots.map((robot, i) => {\r\n        return (\r\n          <Card\r\n            key={robots[i].id}\r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            email={robots[i].email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchField, searchChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        className=\"pa3 ba bg-lightest-blue b--green\"\r\n        type=\"search\"\r\n        placeholder=\"search robots\"\r\n        onChange={searchChange}\r\n      ></input>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\nreturn (\r\n    <div style={{overflowY: \"scroll\", border: \"1px black solid\", height: \"500px\"}}>\r\n        {props.children}\r\n    </div>\r\n)\r\n}\r\n\r\nexport default Scroll;","import React from \"react\";\r\n\r\nclass Counter extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    updateCount = () => {\r\n        this.setState(state => ({count: state.count + 1}))\r\n    }\r\n    render() {\r\n        return (\r\n            <button color={this.props.color} onClick={this.updateCount}>\r\n                Count: {this.state.count}\r\n            </button>\r\n        )\r\n            \r\n        \r\n    }\r\n}\r\n\r\nexport default Counter;\r\n","import React from \"react\";\r\nimport Counter from \"./Counter\";\r\n\r\nclass Header extends React.Component {\r\n\r\nshouldComponentUpdate(nextProps, nextState) {\r\nreturn false;\r\n}\r\n\r\n    \r\nrender(){\r\n    console.log(\"Header\");\r\n  return (\r\n    <div>\r\n    <h1>Robofriends</h1>\r\n    <Counter color={\"red\"}/>\r\n    </div>\r\n\r\n  );\r\n}};\r\n\r\nexport default Header;\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";","import React from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./App.css\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport Header from \"../components/Header\";\r\n\r\n\r\nimport { requestRobots, setSearchField } from \"../actions\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => requestRobots(dispatch),\r\n  };\r\n};\r\n\r\nclass App extends React.Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { searchField, onSearchChange, robots, isPending } = this.props;\r\n\r\n    const filteredRobots = robots.filter((robot) =>\r\n      robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n    );\r\n\r\n    return isPending ? (\r\n      <h1 className=\"tc\">Loading Robots</h1>\r\n    ) : (\r\n      <div className=\"tc\">\r\n        <Header/>\r\n        <SearchBox searchChange={onSearchChange} />\r\n        <Scroll>\r\n          <CardList robots={filteredRobots} />\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from \"./constants\";\r\n\r\nexport const setSearchField = (text) => ({\r\ntype: CHANGE_SEARCH_FIELD,\r\npayload: text\r\n});\r\n\r\nexport const requestRobots = (dispatch) => {\r\ndispatch({type: REQUEST_ROBOTS_PENDING})\r\nfetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((response) => response.json())\r\n      .then((data) => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n      .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n  searchField: \"\",\r\n};\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: \"\",\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return { ...state, searchField: action.payload };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return { ...state, isPending: true };\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return { ...state, robots: action.payload, isPending: false };\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return { ...state, error: action.payload, isPending: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport \"tachyons\";\r\nimport App from \"./containers/App\";\r\nimport { searchRobots, requestRobots } from \"./reducers\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport  ThunkMiddleware  from \"redux-thunk\";\r\n\r\nconst rootReducer = combineReducers({searchRobots, requestRobots})\r\nconst logger = createLogger();\r\nconst store = createStore(rootReducer, applyMiddleware(ThunkMiddleware, logger));\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n    <App />\r\n    </Provider>,\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}